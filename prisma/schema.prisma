generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

enum Role {
  USER
  ADMIN
  SUPER_ADMIN
}

enum BookingStatus {
  PENDING
  CONFIRMED
  COMPLETED
  CANCELED
}

enum PaymentStatus {
  UNPAID
  PAID
  REFUNDED
}

model User {
  id                     Int      @id @default(autoincrement())
  email                  String   @unique
  password               String
  name                   String
  role                   Role
  profileImage           String?
  phoneNumber            String?
  address                String?
  bio                    String?
  gender                 String?
  pets                   String[]
  articleId              String[]
  reviewIds              String[]
  bookedServicesIds      String[]
  perticipatingEventsIds String[]
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt
}

model Pet {
  id                Int      @id @default(autoincrement())
  name              String
  type              String
  age               Int
  bio               String?
  ownerId           Int
  breed             String?
  size              String?
  gender            String?
  vaccinationStatus String?
  medicalHistory    String?
  imageUrls         String[]
  forAddoption      Boolean
  forSell           Boolean
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model TimeSlot {
  id          Int      @id @default(autoincrement())
  startTime   String
  endTime     String
  serviceId   Int
  isAvailable Boolean
  date        DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Service {
  id           Int      @id @default(autoincrement())
  title        String
  description  String
  category     String
  price        Float
  image        String
  selectedTime String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  petId        Int?
}

model Booking {
  id            Int           @id @default(autoincrement())
  serviceDate   DateTime
  serviceTime   String
  status        BookingStatus
  petId         Int
  userId        Int
  serviceId     Int
  paymentAmount Float
  paymentStatus PaymentStatus
  paymentDate   DateTime
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model Review {
  id        Int      @id @default(autoincrement())
  rating    Int
  comments  String
  userId    Int
  serviceId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  petId     Int?
}

model Article {
  id        Int      @id @default(autoincrement())
  title     String
  content   String
  authorId  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    Int?
}
