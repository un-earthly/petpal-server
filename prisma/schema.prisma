generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

enum Role {
  USER
  ADMIN
  SUPER_ADMIN
}

enum BookingStatus {
  PENDING
  CONFIRMED
  COMPLETED
  CANCELED
}

enum PaymentStatus {
  UNPAID
  PAID
  REFUNDED
}

enum PetServiceCategory {
  GROOMING
  BOARDING
  TRAINING
  WALKING
  VETERINARY
  SITTING
  DAYCARE
  OTHERS
}

model User {
  id           Int       @id @default(autoincrement())
  email        String    @unique
  password     String
  name         String
  role         Role
  profileImage String?
  phoneNumber  String?
  address      String?
  bio          String?
  gender       String?
  // pets                   String[]
  // articleId              String[]
  // reviewIds              String[]
  // bookedServicesIds      String[]
  // perticipatingEventsIds String[]
  // Pet          Pet[]
  Article      Article[]
  Review       Review[]
  Payment      Payment[]
  Booking      Booking[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("user")
}

// model Pet {
//   id                Int       @id @default(autoincrement())
//   name              String
//   type              String
//   age               Int
//   bio               String?
//   ownerId           Int
//   owner             User      @relation(fields: [ownerId], references: [id])
//   breed             String?
//   size              String?
//   gender            String?
//   vaccinationStatus String?
//   medicalHistory    String?
//   imageUrls         String[]
//   forAddoption      Boolean
//   forSell           Boolean
//   createdAt         DateTime  @default(now())
//   updatedAt         DateTime  @updatedAt
//   Service           Service[]
// }

model TimeSlot {
  id          Int       @id @default(autoincrement())
  startTime   String
  endTime     String
  isAvailable Boolean
  date        DateTime
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  Booking     Booking[]

  @@map("timeslot")
}

model Service {
  id          Int                @id @default(autoincrement())
  title       String
  description String
  category    PetServiceCategory
  price       Float
  image       String
  // petId        Int?
  // pet          Pet?       @relation(fields: [petId], references: [id])
  // TimeSlot     TimeSlot[]
  Review      Review[]
  Booking     Booking[]
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  Payment     Payment[]

  @@map("service")
}

model Payment {
  id            Int           @id @default(autoincrement())
  serviceId     Int
  service       Service       @relation(fields: [serviceId], references: [id])
  userId        Int
  user          User          @relation(fields: [userId], references: [id])
  totalAmount   Float
  transactionId Int
  paymentStatus PaymentStatus
  paymentDate   DateTime
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  Booking       Booking[]

  @@map("payment")
}

model Booking {
  id         Int           @id @default(autoincrement())
  timeSlotId Int
  timeSlot   TimeSlot      @relation(fields: [timeSlotId], references: [id])
  paymentId  Int?
  payment    Payment?      @relation(fields: [paymentId], references: [id])
  status     BookingStatus @default(PENDING)
  userId     Int
  user       User          @relation(fields: [userId], references: [id])
  serviceId  Int
  service    Service       @relation(fields: [serviceId], references: [id])
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt

  @@map("booking")
}

model Review {
  id        Int      @id @default(autoincrement())
  rating    Int
  comments  String
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  serviceId Int
  service   Service  @relation(fields: [serviceId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("review")
}

model Article {
  id        Int      @id @default(autoincrement())
  title     String
  content   String
  authorId  Int
  author    User     @relation(fields: [authorId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    Int?

  @@map("article")
}

// model User {
//   id                Int       @id @default(autoincrement())
//   email             String    @unique
//   password          String
//   name              String
//   role              Role
//   profileImage      String?
//   phoneNumber       String?
//   address           String?
//   bio               String?
//   gender            String?
//   pets              Pet[]
//   articleId         Article[]
//   reviewIds         Review[]
//   bookedServicesIds Booking[]
//   createdAt         DateTime  @default(now())
//   updatedAt         DateTime  @updatedAt
// }

// model Pet {
//   id                Int       @id @default(autoincrement())
//   name              String
//   type              String
//   age               Int
//   bio               String?
//   ownerId           Int
//   owner             User      @relation(fields: [ownerId], references: [id])
//   breed             String?
//   size              String?
//   gender            String?
//   vaccinationStatus String?
//   medicalHistory    String?
//   imageUrls         String[]
//   forAdoption       Boolean
//   forSell           Boolean
//   createdAt         DateTime  @default(now())
//   updatedAt         DateTime  @updatedAt
//   Booking           Booking[]
//   Service           Service[]
// }

// model Article {
//   id        Int      @id @default(autoincrement())
//   title     String
//   content   String
//   authorId  Int
//   author    User     @relation(fields: [authorId], references: [id]) 
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
//   userId    Int?
// }

// model Review {
//   id        Int      @id @default(autoincrement())
//   rating    Int
//   comments  String
//   userId    Int
//   user      User     @relation(fields: [userId], references: [id])
//   serviceId Int
//   petId     Int?
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
// }

// model Booking {
//   id            Int           @id @default(autoincrement())
//   serviceDate   DateTime
//   serviceTime   String
//   status        BookingStatus
//   petId         Int
//   pet           Pet           @relation(fields: [petId], references: [id])
//   userId        Int
//   user          User          @relation(fields: [userId], references: [id])
//   serviceId     Int
//   service       Service       @relation(fields: [serviceId], references: [id])
//   paymentAmount Float
//   paymentStatus PaymentStatus
//   paymentDate   DateTime
//   createdAt     DateTime      @default(now())
//   updatedAt     DateTime      @updatedAt
// }

// model Service {
//   id           Int       @id @default(autoincrement())
//   title        String
//   description  String
//   category     String
//   price        Float
//   image        String
//   selectedTime String?
//   createdAt    DateTime  @default(now())
//   updatedAt    DateTime  @updatedAt
//   petId        Int?
//   pet          Pet?      @relation(fields: [petId], references: [id])
//   Booking      Booking[]
// }
