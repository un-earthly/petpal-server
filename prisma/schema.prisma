generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

enum Role {
  USER
  ADMIN
  SUPER_ADMIN
}

enum BookingStatus {
  PENDING
  CONFIRMED
  COMPLETED
  CANCELED
}

enum PaymentStatus {
  UNPAID
  PAID
  REFUNDED
}

model User {
  id                   Int       @id @default(autoincrement())
  email                String    @unique
  password             String
  firstName            String
  lastName             String
  role                 Role
  profileImage         String?
  phoneNumber          String?
  address              String?
  description          String?
  pets                 Pet[]
  notificationsEnabled Boolean
  articles             Article[]
  reviews              Review[]
  service              Service[]
  booking              Booking[]
}

model Pet {
  id                Int       @id @default(autoincrement())
  name              String
  type              String
  age               Int
  description       String?
  ownerId           Int
  owner             User      @relation(fields: [ownerId], references: [id])
  breed             String?
  size              String?
  gender            String?
  vaccinationStatus String?
  medicalHistory    String?
  imageUrls         String[]
  availableServices Service[]
  reviews           Review[]
  booking           Booking[]
}

model Service {
  id          Int       @id @default(autoincrement())
  name        String
  description String
  category    String
  price       Float
  duration    Int
  providerId  Int
  provider    User      @relation(fields: [providerId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  Pet         Pet?      @relation(fields: [petId], references: [id])
  petId       Int?
  booking     Booking[]
  review      Review[]
}

model Booking {
  id            Int           @id @default(autoincrement())
  serviceDate   DateTime
  serviceTime   String
  status        BookingStatus
  petId         Int
  userId        Int
  serviceId     Int
  paymentAmount Float
  paymentStatus PaymentStatus
  paymentDate   DateTime
  user          User          @relation(fields: [userId], references: [id])
  Pet           Pet           @relation(fields: [petId], references: [id])
  Service       Service       @relation(fields: [serviceId], references: [id])
}

model Review {
  id        Int      @id @default(autoincrement())
  rating    Int
  comments  String
  userId    Int
  serviceId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  petId     Int?
  user      User     @relation(fields: [userId], references: [id])
  pet       Pet?     @relation(fields: [petId], references: [id])
  service   Service  @relation(fields: [serviceId], references: [id])
}

model Article {
  id        Int      @id @default(autoincrement())
  title     String
  content   String
  authorId  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User?    @relation(fields: [userId], references: [id])
  userId    Int?
}
