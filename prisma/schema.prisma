generator client {
  provider = "prisma-client-js"
}
datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") 
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

enum Role {
  USER
  ADMIN
  SUPER_ADMIN
}

enum BookingStatus {
  PENDING
  CONFIRMED
  COMPLETED
  CANCELED
}

enum PaymentStatus {
  UNPAID
  PAID
  REFUNDED
}


model User {
  id                Int       @id @default(autoincrement())
  email             String    @unique
  password          String
  firstName         String
  lastName          String
  role              Role
  profileImage      String?
  phoneNumber       String?
  address           String?
  description       String?
  pets              Pet[]
  notificationsEnabled Boolean
  articles           Article[]
  reviews           Review[]
}
model Pet {
  id                Int       @id @default(autoincrement())
  name              String
  type              String
  age               Int
  description       String?
  servicesOffered    Service[] @relation("PetServicesOffered")
  ownerId            Int
  owner             User      @relation(fields: [ownerId], references: [id])
  breed             String?
  size              String?
  gender            String?
  vaccinationStatus String?
  medicalHistory    String?
  imageUrls         String[]
  servicesRequested  Service[] @relation("PetServicesRequested")
  reviews           Review[]
  availableServices Service[]
}

model Service {
  id          Int     @id @default(autoincrement())
  name        String
  description String
  category    String
  price       Float
  duration    Int
  providerId  Int
  provider    User    @relation(fields: [providerId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Booking {
  id            Int       @id @default(autoincrement())
  serviceDate   DateTime
  serviceTime   String
  status        BookingStatus
  petId          Int
  pet           Pet      @relation(fields: [petId], references: [id])
  providerId    Int
  provider      User     @relation(fields: [providerId], references: [id])
  userId        Int
  user          User     @relation(fields: [userId], references: [id])
  serviceId     Int
  service       Service  @relation(fields: [serviceId], references: [id])
  paymentAmount Float
  paymentStatus PaymentStatus
  paymentDate   DateTime
}

model Review {
  id      Int       @id @default(autoincrement())
  rating  Int
  comments String
  userId    Int
  user     User    @relation(fields: [userId], references: [id])
  serviceId Int
  service  Service @relation(fields: [serviceId], references: [id])
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Article {
  id      Int       @id @default(autoincrement())
  title   String
  content String
  authorId  Int
  author  User    @relation(fields: [authorId], references: [id])
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}